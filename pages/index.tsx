import { RefreshIcon } from "@heroicons/react/outline";
import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";
import Input from "../components/input";
import UserFeedback from "../components/user-feedback";
type Inputs = {
  spaceId: string;
  toReplace: string;
  replaceWith: string;
};
const Home: NextPage = () => {
  const [userFeedback, setUserFeedback] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const {
    register,
    formState: { errors },
    handleSubmit,
  } = useForm<Inputs>({ mode: "onSubmit", reValidateMode: "onChange" });

  const showFeedback = () => {
    setTimeout(() => {
      setUserFeedback(null);
    }, 5000);
  };

  const onSubmit: SubmitHandler<Inputs> = async (inputs: Inputs) => {
    setLoading(true);
    const { spaceId, toReplace, replaceWith } = inputs;

    const res = await replaceString(spaceId, toReplace, replaceWith);

    setUserFeedback(res);
    setLoading(false);
    showFeedback();
  };

  const replaceString = async (
    spaceId: string,
    toReplace: string,
    replaceWith: string
  ): Promise<string> => {
    const res = await fetch(`/api/storyblok/${spaceId}`, {
      method: "POST",
      body: JSON.stringify({ toReplace, replaceWith }),
    });
    return await res.json();
  };

  return (
    <div className="flex flex-col w-full pt-6">
      <Head>
        <title>Storyblok string replacement | Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1 className="text-4xl text-center">Storyblok string replacement</h1>

      <div className="px-8 flex items-center justify-center">
        <form
          className="flex flex-col p-8  max-w-2xl w-full  mt-16 justify-center items-center "
          onSubmit={handleSubmit(onSubmit)}
        >
          <Input
            label="Space ID"
            id="space-id-input"
            errorMsg={errors.spaceId?.message}
            type="number"
            register={register}
            name="spaceId"
          />

          <Input
            label="To replace"
            id="to-replace-input"
            errorMsg={errors.toReplace?.message}
            type="text"
            register={register}
            name="toReplace"
          />

          <Input
            label="Replace with"
            id="replace-with-input"
            errorMsg={errors.replaceWith?.message}
            type="text"
            name="replaceWith"
            register={register}
          />

          <UserFeedback response={userFeedback} />
          {loading && <RefreshIcon className="animate-spin w-8 h-8" />}

          {/* add hover */}
          <input
            autoComplete="true"
            value="Replace"
            className="border rounded-lg border-blue-400  px-8 py-1 mt-6"
            type="submit"
          />
        </form>
      </div>
    </div>
  );
};

export default Home;
